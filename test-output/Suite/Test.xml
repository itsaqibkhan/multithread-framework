<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="user-Latitude-3420" failures="0" tests="4" name="Test" time="9.01" errors="0" timestamp="2023-10-29T16:51:39 IST">
  <testcase classname="com.qa.BaseTest" name="@BeforeMethod beforeMethod" time="0.002">
    <failure type="java.lang.ClassCastException" message="class java.lang.ThreadLocal cannot be cast to class io.appium.java_client.screenrecording.CanRecordScreen (java.lang.ThreadLocal is in module java.base of loader &amp;apos;bootstrap&amp;apos;; io.appium.java_client.screenrecording.CanRecordScreen is in unnamed module of loader &amp;apos;app&amp;apos;)">
      <![CDATA[java.lang.ClassCastException: class java.lang.ThreadLocal cannot be cast to class io.appium.java_client.screenrecording.CanRecordScreen (java.lang.ThreadLocal is in module java.base of loader 'bootstrap'; io.appium.java_client.screenrecording.CanRecordScreen is in unnamed module of loader 'app')
at com.qa.BaseTest.beforeMethod(BaseTest.java:71)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:105)
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.tests.LoginTests" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.qa.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.tests.LoginTests" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.qa.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.tests.LoginTests" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.qa.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.tests.LoginTests" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.qa.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.qa.BaseTest" name="@AfterTest afterTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase classname="com.qa.tests.LoginTests" name="emptyUserName" time="0.0">
    <skipped/>
  </testcase> <!-- emptyUserName -->
  <testcase classname="com.qa.tests.LoginTests" name="invalidUserName" time="0.0">
    <skipped/>
  </testcase> <!-- invalidUserName -->
  <testcase classname="com.qa.tests.LoginTests" name="lockedUserSoftAssert" time="0.0">
    <skipped/>
  </testcase> <!-- lockedUserSoftAssert -->
  <testcase classname="com.qa.tests.LoginTests" name="validUserName" time="0.0">
    <skipped/>
  </testcase> <!-- validUserName -->
</testsuite> <!-- Test -->
